<?xml version="1.0" encoding="ISO-8859-1" ?>

<project name="KiPf Fahrrad Webshop - Datenbank in PostgreSQL" default="load" basedir=".">


<!-- =================================================================== -->
<!-- I N D I V I D U E L L E   P R O P E R T I E S                       -->
<!-- =================================================================== -->
<property environment="env"/>
<property file="${basedir}/../shop/build.global.properties" />
<property file="${basedir}/hibernate.properties"/>
	
<property name="hibernate.properties" value="${basedir}/hibernate.properties" />
<property name="persistence.xml.distr" value="${basedir}/../${ear.project.name}EJB/build/classes/META-INF/persistence.xml" />
<property name="gen.dir" value="${basedir}/gen" />
<property name="tools.log.dir" value="${basedir}/log" />


<!-- =================================================================== -->
<!-- C L A S S P A T H   u n d   T A S K S                               -->
<!-- =================================================================== -->
<path id="jdbc.classpath">
	<pathelement location="${db.driver.jar}"/>
</path>

<path id="hibernateToolTask.classpath">
	<path refid="jdbc.classpath"/>
	<fileset dir="${basedir}/lib" includes="*.jar"/>
	<fileset dir="${env.JBOSS_HOME}/client">
		<include name="commons-logging.jar"/>
		<include name="log4j.jar"/>
		<include name="ejb3-persistence.jar"/>
		<include name="hibernate-annotations.jar"/>
	</fileset>
	<fileset dir="${env.JBOSS_HOME}/server/default/lib">
		<include name="hibernate3.jar"/>
		<include name="hibernate-entitymanager.jar"/>
		<include name="dom4j.jar"/>
	</fileset>
	<pathelement location="${env.JBOSS_HOME}/lib/jboss-common.jar"/>
	<pathelement location="${env.JBOSS_HOME}/server/default/deploy/jbossweb-tomcat55.sar/jsf-libs/commons-collections.jar"/>
</path>

<path id="hbm2java.classpath">
    <path refid="hibernateToolTask.classpath"/>
	<pathelement location="${basedir}"/>         <!-- log4j -->
</path>

<path id="hbm2ddl.classpath">
    <path refid="hibernateToolTask.classpath"/>
	<pathelement location="${basedir}"/>         <!-- META-INF/persistence.xml, log4j -->
	<pathelement location="${basedir}/../${ear.project.name}EJB/build/classes"/>
</path>

<taskdef name="hibernatetool" 
	     classname="org.hibernate.tool.ant.HibernateToolTask" 
	     classpathref="hibernateToolTask.classpath"/>


<!-- =================================================================== -->
<!-- U S E R   E R Z E U G E N                                           -->
<!-- =================================================================== -->
<target name="create-user" description="User erzeugen">
	<sql driver="${hibernate.connection.driver_class}"
		 url="${hibernate.connection.url}"
		 userid="${db.admin}"
		 password="${db.admin.password}"
		 classpathref="jdbc.classpath" >
			CREATE USER ${hibernate.connection.username}
			       PASSWORD '${hibernate.connection.password}';
	</sql>
</target>


<!-- =================================================================== -->
<!-- T A B L E S P A C E   E R Z E U G E N                               -->
<!-- =================================================================== -->
<target name="create-tablespace" description="Tablespace erzeugen">
	<mkdir dir="${db.tablespace.dir}"/>
	<exec executable="cacls">
		<arg line="${db.tablespace.dir} /e /t /g postgres:f"/>
	</exec>
	<exec executable="psql" inputstring="${db.admin.password}">
		<arg value="-c CREATE TABLESPACE ${db.tablespace} LOCATION '${db.tablespace.dir}'"/>
		<arg value="postgres"/>            <!-- data dictionary als DB -->
		<arg value="${db.admin}"/>
	</exec>
</target>

	
<!-- =================================================================== -->
<!-- D A T E N B A N K   E R Z E U G E N                                 -->
<!-- =================================================================== -->
<target name="create-database" depends="create-tablespace" description="DB, Benutzer und Schema erzeugen">
	<!-- CREATE DATABASE darf nicht als Transaktion laufen, also nicht innerhalb von <sql> -->
	<exec executable="psql" inputstring="${db.admin.password}">
		<arg value="-c CREATE DATABASE ${db.name} TABLESPACE=${db.tablespace}" />
		<arg value="postgres"/>            <!-- data dictionary als DB -->
		<arg value="${db.admin}"/>
	</exec>
</target>
	
	
<!-- =================================================================== -->
<!-- S C H E M A   E R Z E U G E N                                       -->
<!-- =================================================================== -->
<target name="create-schema">
	<sql driver="${hibernate.connection.driver_class}"
		 url="${hibernate.connection.url}"
		 userid="${db.admin}"
		 password="${db.admin.password}"
		 classpathref="jdbc.classpath" >
			CREATE SCHEMA ${hibernate.default_schema} AUTHORIZATION ${hibernate.connection.username};
	</sql>
</target>


<!-- =================================================================== -->
<!-- G R A N T                                                           -->
<!-- =================================================================== -->
<target name="grant-create">
	<sql driver="${hibernate.connection.driver_class}"
		 url="${hibernate.connection.url}"
		 userid="${db.admin}"
		 password="${db.admin.password}"
		 classpathref="jdbc.classpath" >
		GRANT CREATE ON SCHEMA ${hibernate.default_schema}
			         TO ${hibernate.connection.username};
		GRANT CREATE ON TABLESPACE ${db.tablespace}
		         TO ${hibernate.connection.username};
	</sql>
</target>


<!-- =================================================================== -->
<!-- R E V O K E                                                         -->
<!-- =================================================================== -->
<target name="revoke-create">
	<sql driver="${hibernate.connection.driver_class}"
		 url="${hibernate.connection.url}"
		 userid="${db.admin}"
		 password="${db.admin.password}"
		 classpathref="jdbc.classpath" >
		REVOKE CREATE ON SCHEMA ${hibernate.default_schema}
			          FROM ${hibernate.connection.username};
		REVOKE CREATE ON TABLESPACE ${db.tablespace}
			          FROM ${hibernate.connection.username};
	</sql>
</target>

<!-- =================================================================== -->
<!-- T A B E L L E N   E R Z E U G E N                                   -->
<!-- =================================================================== -->
<target name="create-tables">
	<sql driver="${hibernate.connection.driver_class}"
		 url="${hibernate.connection.url}"
		 userid="${hibernate.connection.username}"
		 password="${hibernate.connection.password}"
		 classpathref="jdbc.classpath" >
		<transaction src="${basedir}/sql/create-tables.sql" />
	</sql>
</target>


<!-- =================================================================== -->
<!-- T E S T D A T E N   E I N F Ü G E N                                 -->
<!-- =================================================================== -->
<target name="load-data">
	<!-- PostgreSQL arbeitet nur mit "/" beim Laden von CSV-Dateien -->
	<pathconvert targetos="unix" property="basedir.slash">
		<path>
			<pathelement location="${basedir}" />
		</path>
	</pathconvert>
	<filter token="BASEDIR" value="${basedir.slash}" />
	<copy file="sql/load-tables.template.sql" tofile="sql/load-tables.sql" filtering="yes" />
	<sql driver="${hibernate.connection.driver_class}"
		 url="${hibernate.connection.url}"
		 userid="${db.admin}"
		 password="${db.admin.password}"
		 classpathref="jdbc.classpath" >
		<transaction src="${basedir}/sql/load-tables.sql"/>
	</sql>
	<delete file="${basedir}/sql/load-tables.sql"/>
</target>


<!-- =================================================================== -->
<!-- S E Q U E N C E   n a c h   L a d e n   a n p a s s e n             -->
<!-- =================================================================== -->
<target name="alter-seq">
	<sql driver="${hibernate.connection.driver_class}"
		 url="${hibernate.connection.url}"
		 userid="${hibernate.connection.username}"
		 password="${hibernate.connection.password}"
		 classpathref="jdbc.classpath" >
		<transaction src="${basedir}/sql/alter-seq.sql"/>
	</sql>
</target>
	
	
<!-- =================================================================== -->
<!-- S E Q U E N C E   n a c h   L a d e n   a n p a s s e n             -->
<!-- =================================================================== -->
<target name="alter-table">
	<sql driver="${hibernate.connection.driver_class}"
		 url="${hibernate.connection.url}"
		 userid="${hibernate.connection.username}"
		 password="${hibernate.connection.password}"
		 classpathref="jdbc.classpath" >
		<transaction src="${basedir}/sql/alter-table.sql"/>
	</sql>
</target>


<!-- =================================================================== -->
<!-- D E F A U L T   T A R G E T                                         -->
<!-- =================================================================== -->
<target name="load" description="Schema und Tabellen erzeugen, Testdaten einfuegen, Seq anpassen"
		depends="create-schema, grant-create, create-tables, load-data, alter-seq, alter-table, revoke-create"/>


<!-- =================================================================== -->
<!-- S C H E M A   L O E S C H E N                                       -->
<!-- =================================================================== -->
<target name="clean">
	<sql driver="${hibernate.connection.driver_class}"
		 url="${hibernate.connection.url}"
		 userid="${db.admin}"
		 password="${db.admin.password}"
		 classpathref="jdbc.classpath" >
			DROP SCHEMA ${hibernate.default_schema} CASCADE;
	</sql>
</target>

	
<!-- =================================================================== -->
<!-- D A T E N B A N K   L Ö S C H E N                                   -->
<!-- =================================================================== -->
<target name="destroy-database" depends="clean">
	<sql driver="${hibernate.connection.driver_class}"
		 url="${hibernate.connection.url}"
		 userid="${db.admin}"
		 password="${db.admin.password}"
		 classpathref="jdbc.classpath" >
			DROP USER ${hibernate.connection.username};
	</sql>
	<exec executable="psql" inputstring="${db.admin.password}">
		<arg value="-c DROP DATABASE ${db.name}"/>
		<arg value="postgres"/>            <!-- data dictionary als DB -->
		<arg value="${db.admin}"/>
	</exec>
</target>

		
<!-- =================================================================== -->
<!-- R E L O A D   S C H E M A                                           -->
<!-- =================================================================== -->
<target name="reload" description="Schema loeschen und alles neu erzeugen"
		depends="clean, load"/>


<!-- ================================================================================== -->
<!-- L o g -   u n d   G e n e r i e r u n g s v e r z e i c h n i s   e r z e u g e n  -->
<!-- ================================================================================== -->
<target name="make-dirs">
	<mkdir dir="${gen.dir}"/>

	<mkdir dir="${tools.log.dir}"/>
	<pathconvert targetos="unix" property="log.dir.slash">
		<path>
			<pathelement location="${tools.log.dir}" />
		</path>
	</pathconvert>
	<copy file="${basedir}/log4j.template.xml"
	      tofile="${basedir}/log4j.xml">
		<filterset>
			<filter token="LOGDIR" value="${log.dir.slash}" />
		</filterset>
	</copy>
</target>

<!-- =================================================================== -->
<!-- E N T I T Y - K L A S S E N   G E N E R I E R E N                   -->
<!-- =================================================================== -->
<target name="gen-java" description="Java-Klassen fuer POJOs generieren" depends="make-dirs">
	<hibernatetool destdir="${gen.dir}">
		<classpath refid="hbm2java.classpath" />
		<jdbcconfiguration propertyFile="${hibernate.properties}" packagename="de.kipf.${ear.project.name}"/>
		<hbm2java ejb3="true" jdk5="true"/>
	</hibernatetool>
	<echo message="Java-Klassen wurden in ${gen.dir} generiert"/>
	<echo message="Protokoll in ${tools.log.dir}"/>
</target>

<!-- =================================================================== -->
<!-- D D L   G E N E R I E R E N                                         -->
<!-- =================================================================== -->
<target name="gen-ddl" description="DDL-Skript als Vorlage generieren" depends="make-dirs">
	<move file="${persistence.xml.distr}" tofile="${persistence.xml.distr}.backup"/>
	<hibernatetool destdir="${gen.dir}">
		<classpath refid="hbm2ddl.classpath"/>
		<jpaconfiguration/>
		<hbm2ddl outputfilename="create-tables.sql" drop="false" export="false"/>
	</hibernatetool>
	<move file="${persistence.xml.distr}.backup" tofile="${persistence.xml.distr}"/>
	<echo message="SQL-Skripte wurden in ${gen.dir} generiert"/>
	<echo message="Protokoll in ${tools.log.dir}"/>
</target>

</project>


